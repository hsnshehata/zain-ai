// public/js/instagram.js (New file for Instagram settings page)

document.addEventListener("DOMContentLoaded", () => {
  async function loadInstagramPage() {
    const link = document.createElement("link");
    link.rel = "stylesheet";
    link.href = "/css/instagram.css";
    document.head.appendChild(link);
    const content = document.getElementById("content");
    const token = localStorage.getItem("token");
    const selectedBotId = localStorage.getItem("selectedBotId");

    if (!selectedBotId) {
      content.innerHTML = `
        <div class="placeholder error">
          <h2><i class="fas fa-exclamation-triangle"></i> ูู ูุชู ุงุฎุชูุงุฑ ุจูุช</h2>
          <p>ูุฑุฌู ุงุฎุชูุงุฑ ุจูุช ูู ุงููุงุฆูุฉ ุงูุนูููุฉ ุฃููุงู ูุนุฑุถ ุฅุนุฏุงุฏุงุช ุฅูุณุชุฌุฑุงู.</p>
        </div>
      `;
      return;
    }

    if (!token) {
      content.innerHTML = `
        <div class="placeholder error">
          <h2><i class="fas fa-exclamation-triangle"></i> ุชุณุฌูู ุงูุฏุฎูู ูุทููุจ</h2>
          <p>ูุฑุฌู ุชุณุฌูู ุงูุฏุฎูู ูุนุฑุถ ุฅุนุฏุงุฏุงุช ุฅูุณุชุฌุฑุงู.</p>
        </div>
      `;
      return;
    }

    // Main structure for the Instagram settings page
    content.innerHTML = `
      <div class="page-header">
        <h2><i class="fab fa-instagram"></i> ุฅุนุฏุงุฏุงุช ุฑุจุท ุฅูุณุชุฌุฑุงู</h2>
        <div id="instructionsContainer" class="instructions-container" style="display: none;">
          <h3>๐ ุฎุทูุงุช ุจุณูุทุฉ ูุฑุจุท ุญุณุงุจู ุนูู ุฅูุณุชุฌุฑุงู</h3>
          <p>ุนุดุงู ุชูุฏุฑ ุชุฑุจุท ุญุณุงุจู ุจุงูุจูุช ุจูุฌุงุญุ ุงุชุฃูุฏ ูู ุงูุฎุทูุงุช ุฏู:</p>
          <ul>
            <li>
              <strong>ุฅูุดุงุก ุญุณุงุจ ูุทูุฑ:</strong> ูุงุฒู ูููู ุนูุฏู ุญุณุงุจ ูุทูุฑ ุนูู ูููุน Meta Developer ุนุดุงู ุชูุฏุฑ ุชููู ุนูููุฉ ุงูุฑุจุท.
              <br>
              <span style="display: block; margin-top: 5px;">
                <strong>ุฅุฒุงู ุชุนูู ุญุณุงุจ ูุทูุฑุ</strong><br>
                1. ุงุฏุฎู ุนูู ูููุน <a href="https://developers.facebook.com/" target="_blank">Meta Developer</a>.<br>
                2. ุงุถุบุท ุนูู "Get Started" ุฃู "Log In" ูู ุนูุฏู ุญุณุงุจ ููุณุจูู.<br>
                3. ุณุฌูู ุฏุฎููู ุจููุณ ุญุณุงุจ ููุณุจูู ุงููู ุจุชุฏูุฑ ููู ุญุณุงุจ ุงูุฅูุณุชุฌุฑุงู.<br>
                4. ูุงูู ุนูู ุดุฑูุท ุงููุทูุฑูู (Meta Developer Terms) ูู ุธูุฑุชููุ ููุฏู ููุจูู ุนูุฏู ุญุณุงุจ ูุทูุฑ.
              </span>
            </li>
            <li>
              <strong>ุชูุงุตู ูุนุงูุง:</strong> ุจุนุฏ ูุง ุชุนูู ุญุณุงุจ ุงููุทูุฑุ ุงุจุนุชููุง ุฑุณุงูุฉ ุนูู ูุงุชุณุงุจ ุนูู ุงูุฑูู 
              <a href="https://wa.me/01279425543" target="_blank">01279425543</a>ุ ูููุจุนุชูู ุฏุนูุฉ ูุชุทุจูููุง ุนุดุงู ุชูุฏุฑ ุชุณุชุฎุฏูู.
            </li>
            <li>
              <strong>ุฑุจุท ุงูุญุณุงุจ:</strong> ุจุนุฏ ูุง ุชูุจู ุงูุฏุนูุฉุ ุชูุฏุฑ ุชุฎุชุงุฑ ุญุณุงุจ ุงูุฅูุณุชุฌุฑุงู ุงููู ุจุชุฏูุฑู ูู ุงูุฒุฑ ุงููู ุชุญุช ุนุดุงู ุงูุจูุช ูุดุชุบู ุนููู.
            </li>
          </ul>
        </div>
        <div class="header-actions">
          <button id="connectInstagramBtn" class="btn btn-primary"><i class="fab fa-instagram"></i> ุฑุจุท ุญุณุงุจู ุนูู ุฅูุณุชุฌุฑุงู</button>
          <div id="pageStatus" class="page-status" style="margin-left: 20px;"></div>
        </div>
      </div>

      <div id="loadingSpinner" class="spinner"><div class="loader"></div></div>
      <div id="errorMessage" class="error-message" style="display: none;"></div>

      <div id="instagramSettingsContainer" class="settings-container instagram-settings-grid" style="display: none;">
        <div class="card settings-card">
          <div class="card-header"><h3><i class="fas fa-toggle-on"></i> ุชูุนูู ููุฒุงุช Webhook</h3></div>
          <div class="card-body toggles-grid">
            <div class="setting-item toggle-item">
              <div class="setting-info">
                <h4>ุฑุณุงุฆู ุงูุชุฑุญูุจ (Opt-ins)</h4>
                <p>ุฅุฑุณุงู ุฑุณุงูุฉ ุชุฑุญูุจ ูู ุงูุจูุช ุจูุฌุฑุฏ ูุชุญ ุฏุฑุฏุดุฉ ูุน ุงูุญุณุงุจ ูุฃูู ูุฑุฉ ูุจู ุจุฏุก ุงููุญุงุฏุซุฉ.</p>
              </div>
              <label class="switch">
                <input type="checkbox" id="messagingOptinsToggle" data-setting-key="messagingOptinsEnabled">
                <span class="slider"></span>
              </label>
            </div>
            <div class="setting-item toggle-item">
              <div class="setting-info">
                <h4>ุฑุฏูุฏ ุงููุนู (Reactions)</h4>
                <p>ุชุณูุญ ููุจูุช ุจุงูุฑุฏูุฏ ุนูู ุนูููุงุช ุงูุชูุงุนู ูุน ุงูุฑุณุงูุฉ ูุซู ุงูุฅุนุฌุงุจ ุฃู ุงูููุจ.</p>
              </div>
              <label class="switch">
                <input type="checkbox" id="messageReactionsToggle" data-setting-key="messageReactionsEnabled">
                <span class="slider"></span>
              </label>
            </div>
            <div class="setting-item toggle-item">
              <div class="setting-info">
                <h4>ุชุชุจุน ุงููุตุฏุฑ (Referrals)</h4>
                <p>ูุนุฑูุฉ ููู ูุตู ุงููุณุชุฎุฏู ุฅูู ุญุณุงุจู (ูุซู ุงูุฅุนูุงูุงุช).</p>
              </div>
              <label class="switch">
                <input type="checkbox" id="messagingReferralsToggle" data-setting-key="messagingReferralsEnabled">
                <span class="slider"></span>
              </label>
            </div>
            <div class="setting-item toggle-item">
              <div class="setting-info">
                <h4>ุชุนุฏููุงุช ุงูุฑุณุงุฆู (Edits)</h4>
                <p>ุงุณุชูุจุงู ุฅุดุนุงุฑุงุช ุนูุฏูุง ูููู ุงููุณุชุฎุฏู ุจุชุนุฏูู ุฑุณุงูุฉ ูุชูููุฏ ุฑุฏ ุฌุฏูุฏ ุจูุงุก ุนูู ุงูุชุนุฏูู.</p>
              </div>
              <label class="switch">
                <input type="checkbox" id="messageEditsToggle" data-setting-key="messageEditsEnabled">
                <span class="slider"></span>
              </label>
            </div>
            <div class="setting-item toggle-item">
              <div class="setting-info">
                <h4>ุงูุฑุฏ ุนูู ุงููุตุต (Stories)</h4>
                <p>ุชุณูุญ ููุจูุช ุจุงูุฑุฏ ุนูู ุงููุตุต ุงููุฑุชุจุทุฉ ุจุงูุญุณุงุจ.</p>
              </div>
              <label class="switch">
                <input type="checkbox" id="storiesRepliesToggle" data-setting-key="storiesRepliesEnabled">
                <span class="slider"></span>
              </label>
            </div>
            <div class="setting-item toggle-item">
              <div class="setting-info">
                <h4>ุงูุฑุฏ ุนูู ุงูุชุนูููุงุช (Comments)</h4>
                <p>ุชุณูุญ ููุจูุช ุจุงูุฑุฏ ุนูู ุชุนูููุงุช ุงููุณุชุฎุฏููู ุนูู ุงูููุดูุฑุงุช ุจููุณ ุทุฑููุฉ ุงูุฑุฏ ุนูู ุงูุฑุณุงุฆู.</p>
              </div>
              <label class="switch">
                <input type="checkbox" id="commentsRepliesToggle" data-setting-key="commentsRepliesEnabled">
                <span class="slider"></span>
              </label>
            </div>
          </div>
          <p id="togglesError" class="error-message small-error" style="display: none;"></p>
        </div>
      </div>
    `;

    // Load Instagram SDK (using the same Facebook SDK since Instagram is managed via Meta)
    const fbScript = document.createElement("script");
    fbScript.src = "https://connect.facebook.net/en_US/sdk.js";
    fbScript.async = true;
    fbScript.defer = true;
    fbScript.crossOrigin = "anonymous";
    document.head.appendChild(fbScript);

    const loadingSpinner = document.getElementById("loadingSpinner");
    const errorMessage = document.getElementById("errorMessage");
    const settingsContainer = document.getElementById("instagramSettingsContainer");
    const instructionsContainer = document.getElementById("instructionsContainer");
    const connectInstagramBtn = document.getElementById("connectInstagramBtn");
    const pageStatus = document.getElementById("pageStatus");

    // Toggle elements
    const toggles = settingsContainer.querySelectorAll(".switch input[type=\"checkbox\"]");
    const togglesError = document.getElementById("togglesError");

    // --- Functions ---

    async function handleApiRequest(url, options, errorElement, defaultErrorMessage) {
      try {
        const response = await fetch(url, options);
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || defaultErrorMessage);
        }
        return await response.json();
      } catch (err) {
        errorElement.textContent = err.message;
        errorElement.style.display = "block";
        throw err;
      }
    }

    async function loadBotSettings(botId) {
      loadingSpinner.style.display = "flex";
      settingsContainer.style.display = "none";
      errorMessage.style.display = "none";

      try {
        const settings = await handleApiRequest(`/api/bots/${botId}/settings`, {
          headers: { Authorization: `Bearer ${token}` },
        }, errorMessage, "ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญููู ุงูุฅุนุฏุงุฏุงุช");

        // Populate Toggles
        toggles.forEach(toggle => {
          const key = toggle.dataset.settingKey;
          if (key && settings.hasOwnProperty(key)) {
            toggle.checked = settings[key];
          }
        });

        settingsContainer.style.display = "grid";
      } catch (err) {
        // ุงูุฎุทุฃ ุชู ุงูุชุนุงูู ูุนู ูู handleApiRequest
      } finally {
        loadingSpinner.style.display = "none";
      }
    }

    async function loadPageStatus(botId) {
      console.log(`ุฌุงุฑู ุฌูุจ ุจูุงูุงุช ุงูุจูุช ุจุงูู ID: ${botId}`);
      try {
        const bot = await handleApiRequest(`/api/bots/${botId}`, {
          headers: { Authorization: `Bearer ${token}` },
        }, pageStatus, "ูุดู ูู ุฌูุจ ุจูุงูุงุช ุงูุจูุช");

        if (!bot) {
          console.log(`ุงูุจูุช ุจุงูู ID ${botId} ูุด ููุฌูุฏ`);
          pageStatus.innerHTML = `
            <div style="display: inline-block; color: red;">
              <strong>ุญุงูุฉ ุงูุฑุจุท:</strong> ุบูุฑ ูุฑุจูุท โ<br>
              <strong>ุงูุณุจุจ:</strong> ุงูุจูุช ุบูุฑ ููุฌูุฏ ุฃู ุชู ุญุฐูู
            </div>
          `;
          instructionsContainer.style.display = "block"; // Show instructions if bot is not linked
          return;
        }

        console.log(`ุจูุงูุงุช ุงูุจูุช:`, bot);

        // Check if bot is linked to an Instagram account
        if (bot.instagramPageId && bot.instagramApiKey) {
          console.log(`ุฌุงุฑู ุฌูุจ ุจูุงูุงุช ุงูุญุณุงุจ ุจุงูู ID: ${bot.instagramPageId}`);
          const response = await fetch(`https://graph.instagram.com/me?fields=username&access_token=${bot.instagramApiKey}`);
          const accountData = await response.json();

          if (accountData.username) {
            console.log(`ุชู ุฌูุจ ุจูุงูุงุช ุงูุญุณุงุจ ุจูุฌุงุญ:`, accountData);
            pageStatus.innerHTML = `
              <div style="display: inline-block; color: green;">
                <strong>ุญุงูุฉ ุงูุฑุจุท:</strong> ูุฑุจูุท โ<br>
                <strong>ุงุณู ุงูุญุณุงุจ:</strong> ${accountData.username}<br>
                <strong>ูุนุฑู ุงูุญุณุงุจ:</strong> ${bot.instagramPageId}
              </div>
            `;
            instructionsContainer.style.display = "none"; // Hide instructions if bot is linked
          } else {
            console.log(`ูุดู ูู ุฌูุจ ุจูุงูุงุช ุงูุญุณุงุจ:`, accountData);
            pageStatus.innerHTML = `
              <div style="display: inline-block; color: red;">
                <strong>ุญุงูุฉ ุงูุฑุจุท:</strong> ุบูุฑ ูุฑุจูุท โ<br>
                <strong>ุงูุณุจุจ:</strong> ูุดู ูู ุฌูุจ ุจูุงูุงุช ุงูุญุณุงุจ (ุงูุชููู ูุฏ ูููู ุบูุฑ ุตุงูุญ ุฃู ููุชูู)
              </div>
            `;
            instructionsContainer.style.display = "block"; // Show instructions if bot is not linked
          }
        } else {
          console.log(`ุงูุจูุช ูุด ูุฑุชุจุท ุจุญุณุงุจ ุฅูุณุชุฌุฑุงู`);
          pageStatus.innerHTML = `
            <div style="display: inline-block; color: red;">
              <strong>ุญุงูุฉ ุงูุฑุจุท:</strong> ุบูุฑ ูุฑุจูุท โ
            </div>
          `;
          instructionsContainer.style.display = "block"; // Show instructions if bot is not linked
        }
      } catch (err) {
        console.error('Error loading account status:', err);
        pageStatus.innerHTML = `
          <div style="display: inline-block; color: red;">
            <strong>ุญุงูุฉ ุงูุฑุจุท:</strong> ุบูุฑ ูุฑุจูุท โ<br>
            <strong>ุงูุณุจุจ:</strong> ุฎุทุฃ ูู ุฌูุจ ุจูุงูุงุช ุงูุจูุช: ${err.message || 'ุบูุฑ ูุนุฑูู'}
          </div>
        `;
        instructionsContainer.style.display = "block"; // Show instructions if bot is not linked
      }
    }

    async function saveApiKeys(botId, instagramApiKey, instagramPageId) {
      errorMessage.style.display = "none";

      if (!instagramApiKey || !instagramPageId) {
        errorMessage.textContent = "ูุดู ุญูุธ ูุนูููุงุช ุงูุฑุจุท: ููุชุงุญ API ุฃู ูุนุฑู ุงูุญุณุงุจ ุบูุฑ ููุฌูุฏ";
        errorMessage.style.display = "block";
        return;
      }

      console.log('ุงูุจูุงูุงุช ุงููุฑุณูุฉ:', { instagramApiKey, instagramPageId });

      try {
        // ุฅุฑุณุงู ุงูุชููู ูุตูุฑ ุงูุฃูุฏ ููู backend ูุชุญูููู ุฅูู ุชููู ุทููู ุงูุฃูุฏ
        const saveResponse = await handleApiRequest(`/api/bots/${botId}/link-instagram`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify({ instagramApiKey, instagramPageId }),
        }, errorMessage, "ูุดู ุญูุธ ูุนูููุงุช ุงูุฑุจุท");

        console.log('โ ุงูุชููู ุชู ุญูุธู ุจูุฌุงุญ:', instagramApiKey.slice(0, 10) + '...');
        alert("ุชู ุฑุจุท ุงูุญุณุงุจ ุจูุฌุงุญ!");
        await loadPageStatus(botId);
      } catch (err) {
        console.error('โ ุฎุทุฃ ูู ุญูุธ ุงูุชููู:', err);
        errorMessage.textContent = 'ุฎุทุฃ ูู ุญูุธ ุงูุชููู: ' + (err.message || 'ุบูุฑ ูุนุฑูู');
        errorMessage.style.display = 'block';
      }
    }

    async function updateWebhookSetting(botId, key, value) {
      togglesError.style.display = "none";

      try {
        await handleApiRequest(`/api/bots/${botId}/settings`, {
          method: "PATCH",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify({ [key]: value }),
        }, togglesError, `ูุดู ุชุญุฏูุซ ุฅุนุฏุงุฏ ${key}`);

        console.log(`โ Updated ${key} to ${value} for bot ${botId}`);
      } catch (err) {
        const toggleInput = document.querySelector(`input[data-setting-key="${key}"]`);
        if (toggleInput) toggleInput.checked = !value;
      }
    }

    // Initialize Facebook SDK (used for Instagram as well)
    window.fbAsyncInit = function () {
      FB.init({
        appId: '499020366015281',
        cookie: true,
        xfbml: true,
        version: 'v20.0'
      });
    };

    function loginWithInstagram() {
      FB.login(function (response) {
        if (response.authResponse) {
          console.log('ุชู ุชุณุฌูู ุงูุฏุฎูู!');
          getUserAccounts(response.authResponse.accessToken);
        } else {
          errorMessage.textContent = 'ุชู ุฅูุบุงุก ุชุณุฌูู ุงูุฏุฎูู ุฃู ุญุฏุซ ุฎุทุฃ';
          errorMessage.style.display = 'block';
        }
      }, { 
        scope: 'public_profile,instagram_basic,instagram_manage_messages,instagram_manage_comments,instagram_manage_insights'
      });
    }

    function getUserAccounts(accessToken) {
      FB.api('/me/accounts', { access_token: accessToken }, function (response) {
        if (response && !response.error) {
          console.log('ุงูุตูุญุงุช:', response.data);
          if (response.data.length === 0) {
            errorMessage.textContent = 'ูู ูุชู ุงูุนุซูุฑ ุนูู ุตูุญุงุช ูุฑุชุจุทุฉ ุจุญุณุงุจู';
            errorMessage.style.display = 'block';
            return;
          }

          const pageIds = response.data.map(page => page.id);
          const pagePromises = pageIds.map(pageId =>
            new Promise((resolve) => {
              FB.api(`/${pageId}?fields=instagram_business_account`, { access_token: accessToken }, function (igResponse) {
                if (igResponse && igResponse.instagram_business_account) {
                  resolve({
                    pageName: response.data.find(page => page.id === pageId).name,
                    igAccountId: igResponse.instagram_business_account.id,
                    accessToken: accessToken
                  });
                } else {
                  resolve(null);
                }
              });
            })
          );

          Promise.all(pagePromises).then(accounts => {
            const validAccounts = accounts.filter(account => account !== null);
            if (validAccounts.length === 0) {
              errorMessage.textContent = 'ูู ูุชู ุงูุนุซูุฑ ุนูู ุญุณุงุจุงุช ุฅูุณุชุฌุฑุงู ูุฑุชุจุทุฉ ุจุตูุญุงุชู';
              errorMessage.style.display = 'block';
              return;
            }

            const modal = document.createElement("div");
            modal.classList.add("modal");
            modal.innerHTML = `
              <div class="modal-content">
                <div class="modal-header">
                  <h3>ุงุฎุชุฑ ุญุณุงุจ ุฅูุณุชุฌุฑุงู ูุฑุจุทู ุจุงูุจูุช</h3>
                  <button class="modal-close-btn"><i class="fas fa-times"></i></button>
                </div>
                <div class="modal-body">
                  <select id="accountSelect" class="form-control">
                    <option value="">ุงุฎุชุฑ ุญุณุงุจ</option>
                    ${validAccounts.map(account => `<option value="${account.igAccountId}" data-token="${account.accessToken}">${account.pageName} (@${account.igAccountId})</option>`).join('')}
                  </select>
                </div>
                <div class="form-actions">
                  <button id="confirmAccountBtn" class="btn btn-primary">ุชุฃููุฏ</button>
                  <button class="btn btn-secondary modal-close-btn">ุฅูุบุงุก</button>
                </div>
              </div>
            `;
            document.body.appendChild(modal);

            modal.querySelectorAll(".modal-close-btn").forEach(btn => {
              btn.addEventListener("click", () => modal.remove());
            });

            document.getElementById("confirmAccountBtn").addEventListener("click", () => {
              const accountSelect = document.getElementById("accountSelect");
              const selectedAccountId = accountSelect.value;
              const selectedOption = accountSelect.options[accountSelect.selectedIndex];
              const accessToken = selectedOption.dataset.token;

              if (!selectedAccountId || !accessToken) {
                errorMessage.textContent = 'ูุฑุฌู ุงุฎุชูุงุฑ ุญุณุงุจ ูุฑุจุทู ุจุงูุจูุช';
                errorMessage.style.display = 'block';
                modal.remove();
                return;
              }

              console.log('ุจูุงูุงุช ุงูุญุณุงุจ ุงููุฎุชุงุฑ:', { access_token: accessToken, account_id: selectedAccountId });
              saveApiKeys(selectedBotId, accessToken, selectedAccountId);
              modal.remove();
            });
          });
        } else {
          errorMessage.textContent = 'ุฎุทุฃ ูู ุฌูุจ ุงูุญุณุงุจุงุช: ' + (response.error.message || 'ุบูุฑ ูุนุฑูู');
          errorMessage.style.display = 'block';
        }
      });
    }

    // --- Event Listeners ---
    connectInstagramBtn.addEventListener("click", loginWithInstagram);

    toggles.forEach(toggle => {
      toggle.addEventListener("change", (e) => {
        const key = e.target.dataset.settingKey;
        const value = e.target.checked;
        if (key) {
          updateWebhookSetting(selectedBotId, key, value);
        }
      });
    });

    // --- Initial Load ---
    loadBotSettings(selectedBotId);
    loadPageStatus(selectedBotId);
  }

  // Make loadInstagramPage globally accessible
  window.loadInstagramPage = loadInstagramPage;

  // Ensure the function is available even if called early
  if (window.loadInstagramPage) {
    console.log('โ loadInstagramPage is defined and ready');
  } else {
    console.error('โ loadInstagramPage is not defined');
  }
});
