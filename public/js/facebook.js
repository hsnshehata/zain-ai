// public/js/facebook.js

async function loadFacebookPage() {
  const link = document.createElement("link");
  link.rel = "stylesheet";
  link.href = "/css/facebook.css";
  document.head.appendChild(link);
  const content = document.getElementById("content");
  const token = localStorage.getItem("token");
  const selectedBotId = localStorage.getItem("selectedBotId");

  if (!selectedBotId) {
    content.innerHTML = `
      <div class="placeholder error">
        <h2><i class="fas fa-exclamation-triangle"></i> ูู ูุชู ุงุฎุชูุงุฑ ุจูุช</h2>
        <p>ูุฑุฌู ุงุฎุชูุงุฑ ุจูุช ูู ุงููุงุฆูุฉ ุงูุนูููุฉ ุฃููุงู ูุนุฑุถ ุฅุนุฏุงุฏุงุช ููุณุจูู.</p>
      </div>
    `;
    return;
  }

  if (!token) {
    content.innerHTML = `
      <div class="placeholder error">
        <h2><i class="fas fa-exclamation-triangle"></i> ุชุณุฌูู ุงูุฏุฎูู ูุทููุจ</h2>
        <p>ูุฑุฌู ุชุณุฌูู ุงูุฏุฎูู ูุนุฑุถ ุฅุนุฏุงุฏุงุช ููุณุจูู.</p>
      </div>
    `;
    return;
  }

  // Main structure for the Facebook settings page
  content.innerHTML = `
    <div class="page-header">
      <h2><i class="fab fa-facebook"></i> ุฅุนุฏุงุฏุงุช ุฑุจุท ููุณุจูู</h2>
      <div id="instructionsContainer" class="instructions-container" style="display: none;">
        <h3>๐ ุฎุทูุงุช ุฑุจุท ุตูุญุชู ุนูู ููุณุจูู ุจุงูุจูุช</h3>
        <p>ุนุดุงู ุชุฑุจุท ุตูุญุชู ุจุงูุจูุช ุจุณูููุฉุ ุงุชูุจุน ุงูุฎุทูุงุช ุฏู ุจุนูุงูุฉ:</p>
        <ul>
          <li>
            <strong>1. ูุงุฒู ูููู ุนูุฏู ุตูุญุฉ ููุณุจูู:</strong> ูุงุฒู ุชููู ูุฏูุฑ ุตูุญุฉ ููุณุจูู ูุฑุจูุทุฉ ุจุญุณุงุจู ุงูุดุฎุตู.
            <br>
            <span style="display: block; margin-top: 5px;">
              <strong>ุฅุฒุงู ุชุนูู ุตูุญุฉ ูู ูุนูุฏูุดุ</strong><br>
              - ุงูุชุญ ููุณุจูู ูุงุถุบุท ุนูู "ุฅูุดุงุก" ูู ุงููุงููุฉ ุงูุฌุงูุจูุฉ.<br>
              - ุงุฎุชุงุฑ "ุตูุญุฉ"ุ ูุงูููู ุจูุงูุงุช ุฒู ุงุณู ุงูุตูุญุฉ ูููุนูุง (ูุซู: ุจูุฒูุณ ุฃู ูุฌุชูุน).<br>
              - ุงูุดุฑ ุงูุตูุญุฉ ูุชุฃูุฏ ุฅูู ุฃูุช ุงููุฏูุฑ ุจุชุงุนูุง ูู ุฅุนุฏุงุฏุงุช ุงูุตูุญุฉ.
            </span>
          </li>
          <li>
            <strong>2. ุฅูุดุงุก ุญุณุงุจ ูุทูุฑ ููุณุจูู:</strong> ูุงุฒู ูููู ุนูุฏู ุญุณุงุจ ูุทูุฑ ุนูู ูููุน ููุณุจูู ูููุทูุฑูู ุนุดุงู ุชูุฏุฑ ุชุฑุจุท ุงูุชุทุจูู.
            <br>
            <span style="display: block; margin-top: 5px;">
              <strong>ุฅุฒุงู ุชุนูู ุญุณุงุจ ูุทูุฑุ</strong><br>
              - ุงุถุบุท ุนูู ุงูุฒุฑุงุฑ ุฏู ูุฑูุญ ุนูู ูููุน ููุณุจูู ูููุทูุฑูู:
              <br>
              <a href="https://developers.facebook.com/" target="_blank" class="btn btn-primary btn-developer" style="display: inline-block; margin: 10px 0; padding: 8px 16px; background-color: #1877F2; color: white; border-radius: 5px; text-decoration: none;">
                <i class="fab fa-facebook"></i> ูููุน ููุณุจูู ูููุทูุฑูู
              </a><br>
              - ูู ุฃูู ูุฑุฉ ุชุฏุฎูุ ุงุถุบุท ุนูู "Get Started" ุฃู "ุงูุชุณุฌูู".<br>
              - ุณุฌูู ุจุญุณุงุจู ูู ููุณุจููุ ููุงูู ุนูู ุดุฑูุท ุงููุทูุฑูู.<br>
            </span>
          </li>
          <li>
            <strong>3. ุงุจุนุชููุง ุฑุงุจุท ุตูุญุชู ุนูู ูุงุชุณุงุจ:</strong> ุจุนุฏ ูุง ุชุนูู ุงูุตูุญุฉ ูุญุณุงุจ ุงููุทูุฑุ ุงุจุนุชููุง ุฑุงุจุท ุตูุญุชู ุนูู ูุงุชุณุงุจ.
            <br>
            <span style="display: block; margin-top: 5px;">
              - ุงุจุนุช ุงูุฑุงุจุท ุนูู ุงูุฑูู: <a href="https://wa.me/01279425543" target="_blank">01279425543</a>.<br>
              - ููุจุนุชูู ุฏุนูุฉ ูุชุทุจูููุง ุนูู ููุณุจูู ุนุดุงู ุชูุฏุฑ ุชุณุชุฎุฏูู.<br>
              - ุงูุชุญ ุงูุฏุนูุฉ ูู ุฅุดุนุงุฑุงุช ููุณุจููุ ูุงุถุบุท "ูุจูู" ุนุดุงู ุชูุนูู ุงูุชุทุจูู.
            </span>
          </li>
          <li>
            <strong>4. ุงุฑุฌุน ูุงุฑุจุท ุงูุตูุญุฉ:</strong> ุจุนุฏ ูุง ุชูุจู ุงูุฏุนูุฉุ ุงุฑุฌุน ููุง ูุงุถุบุท ุนูู ุฒุฑ "ุฑุจุท ุงูุตูุญุฉ".
            <br>
            <span style="display: block; margin-top: 5px;">
              - ููุธูุฑูู ูุงููุฉ ุจุงูุตูุญุงุช ุงููู ุจุชุฏูุฑูุง.<br>
              - ุงุฎุชุงุฑ ุงูุตูุญุฉ ุงููู ุนุงูุฒ ุชุฑุจุทูุงุ ูุงุถุบุท "ุชุฃููุฏ".<br>
              - ูู ูู ุญุงุฌุฉ ุชูุงูุ ููุชุฑุจุท ุงูุจูุช ุจุตูุญุชู ุจูุฌุงุญ!
            </span>
          </li>
        </ul>
      </div>
      <div class="header-actions">
        <button id="connectFacebookBtn" class="btn btn-primary"><i class="fab fa-facebook"></i> ุฑุจุท ุตูุญุชู ุนูู ููุณุจูู</button>
        <div id="pageStatus" class="page-status" style="margin-left: 20px;"></div>
      </div>
    </div>

    <div id="loadingSpinner" class="spinner"><div class="loader"></div></div>
    <div id="errorMessage" class="error-message" style="display: none;"></div>

    <div id="facebookSettingsContainer" class="settings-container facebook-settings-grid" style="display: none;">
      <div class="card settings-card">
        <div class="card-header"><h3><i class="fas fa-toggle-on"></i> ุชูุนูู ููุฒุงุช Webhook</h3></div>
        <div class="card-body toggles-grid">
          <div class="setting-item toggle-item">
            <div class="setting-info">
              <h4>ุฑุณุงุฆู ุงูุชุฑุญูุจ (Opt-ins)</h4>
              <p>ุฅุฑุณุงู ุฑุณุงูุฉ ุชุฑุญูุจ ูู ุงูุจูุช ุจูุฌุฑุฏ ูุชุญ ุฏุฑุฏุดุฉ ูุน ุงูุตูุญุฉ ูุฃูู ูุฑุฉ ูุจู ุจุฏุก ุงููุญุงุฏุซุฉ.</p>
            </div>
            <label class="switch">
              <input type="checkbox" id="messagingOptinsToggle" data-setting-key="messagingOptinsEnabled">
              <span class="slider"></span>
            </label>
          </div>
          <div class="setting-item toggle-item">
            <div class="setting-info">
              <h4>ุฑุฏูุฏ ุงููุนู (Reactions)</h4>
              <p>ุชุณูุญ ููุจูุช ุจุงูุฑุฏูุฏ ุนูู ุนูููุงุช ุงูุชูุงุนู ูุน ุงูุฑุณุงูุฉ ูุซู ุงุนุฌุงุจ ุฃู ููุจ.</p>
            </div>
            <label class="switch">
              <input type="checkbox" id="messageReactionsToggle" data-setting-key="messageReactionsEnabled">
              <span class="slider"></span>
            </label>
          </div>
          <div class="setting-item toggle-item">
            <div class="setting-info">
              <h4>ุชุชุจุน ุงููุตุฏุฑ (Referrals)</h4>
              <p>ูุนุฑูุฉ ููู ูุตู ุงููุณุชุฎุฏู ุฅูู ุตูุญุชู (ูุซู ุงูุฅุนูุงูุงุช).</p>
            </div>
            <label class="switch">
              <input type="checkbox" id="messagingReferralsToggle" data-setting-key="messagingReferralsEnabled">
              <span class="slider"></span>
            </label>
          </div>
          <div class="setting-item toggle-item">
            <div class="setting-info">
              <h4>ุชุนุฏููุงุช ุงูุฑุณุงุฆู (Edits)</h4>
              <p>ุงุณุชูุจุงู ุฅุดุนุงุฑุงุช ุนูุฏูุง ูููู ุงููุณุชุฎุฏู ุจุชุนุฏูู ุฑุณุงูุฉ ูุชูููุฏ ุฑุฏ ุฌุฏูุฏ ุจูุงุก ุนูู ุงูุชุนุฏูู.</p>
            </div>
            <label class="switch">
              <input type="checkbox" id="messageEditsToggle" data-setting-key="messageEditsEnabled">
              <span class="slider"></span>
            </label>
          </div>
          <div class="setting-item toggle-item">
            <div class="setting-info">
              <h4>ุงูุฑุฏ ุนูู ุงูุชุนูููุงุช (Comments)</h4>
              <p>ุชุณูุญ ููุจูุช ุจุงูุฑุฏ ุนูู ุชุนูููุงุช ุงููุณุชุฎุฏููู ุนูู ุจูุณุชุงุช ุงูุตูุญุฉ ุจููุณ ุทุฑููุฉ ุงูุฑุฏ ุนูู ุงูุฑุณุงูู.</p>
            </div>
            <label class="switch">
              <input type="checkbox" id="feedCommentsToggle" data-setting-key="feedCommentsEnabled">
              <span class="slider"></span>
            </label>
          </div>
        </div>
        <p id="togglesError" class="error-message small-error" style="display: none;"></p>
      </div>
    </div>
  `;

  const loadingSpinner = document.getElementById("loadingSpinner");
  const errorMessage = document.getElementById("errorMessage");
  const settingsContainer = document.getElementById("facebookSettingsContainer");
  const instructionsContainer = document.getElementById("instructionsContainer");
  const connectFacebookBtn = document.getElementById("connectFacebookBtn");
  const pageStatus = document.getElementById("pageStatus");

  // Toggle elements
  const toggles = settingsContainer.querySelectorAll(".switch input[type=\"checkbox\"]");
  const togglesError = document.getElementById("togglesError");

  // --- Functions ---

  async function handleApiRequest(url, options, errorElement, defaultErrorMessage) {
    try {
      const response = await fetch(url, options);
      if (!response.ok) {
        let errorMessage = defaultErrorMessage;
        const contentType = response.headers.get("content-type");
        if (response.status === 404) {
          errorMessage = "ุงูุฅุนุฏุงุฏุงุช ุบูุฑ ูุชููุฑุฉ ุญุงูููุง. ุฌุฑุจ ูุงุญููุง ุฃู ุชูุงุตู ูุน ุงูุฏุนู.";
        } else if (!contentType || !contentType.includes("application/json")) {
          errorMessage = "ุงูุฑุฏ ุบูุฑ ูุชููุน (ูุด JSON). ูููู ุฅู ุงูุฎุฏูุฉ ูุด ูุชุงุญุฉ.";
        } else {
          const errorData = await response.json();
          errorMessage = errorData.message || defaultErrorMessage;
        }
        throw new Error(errorMessage);
      }
      return await response.json();
    } catch (err) {
      if (errorElement) {
        errorElement.textContent = err.message;
        errorElement.style.display = "block";
      }
      throw err;
    }
  }

  async function loadBotSettings(botId) {
    loadingSpinner.style.display = "flex";
    settingsContainer.style.display = "none";
    errorMessage.style.display = "none";

    // Default settings in case the API fails
    const defaultSettings = {
      messagingOptinsEnabled: false,
      messageReactionsEnabled: false,
      messagingReferralsEnabled: false,
      messageEditsEnabled: false,
      feedCommentsEnabled: false,
    };

    try {
      const response = await handleApiRequest(`/api/bots/${botId}/settings`, {
        headers: { Authorization: `Bearer ${token}` },
      }, errorMessage, "ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชุญููู ุงูุฅุนุฏุงุฏุงุช");

      if (response.success && response.data) {
        const settings = response.data;
        console.log('ุชู ุฌูุจ ุฅุนุฏุงุฏุงุช ููุณุจูู ุจูุฌุงุญ:', settings);

        // Populate Toggles
        toggles.forEach(toggle => {
          const key = toggle.dataset.settingKey;
          if (key && settings.hasOwnProperty(key)) {
            toggle.checked = settings[key];
            console.log(`Toggle ${key} set to: ${settings[key]}`);
          } else {
            console.warn(`Key ${key} not found in settings, using default`);
            toggle.checked = defaultSettings[key] || false;
          }
        });

        settingsContainer.style.display = "grid";
      } else {
        throw new Error("ูุดู ูู ุฌูุจ ุงูุฅุนุฏุงุฏุงุช: ุงูุจูุงูุงุช ุบูุฑ ูุชุงุญุฉ");
      }
    } catch (err) {
      console.error('ุฎุทุฃ ูู ุชุญููู ุงูุฅุนุฏุงุฏุงุช:', err);
      // Use default settings if API fails
      toggles.forEach(toggle => {
        const key = toggle.dataset.settingKey;
        toggle.checked = defaultSettings[key] || false;
      });
      settingsContainer.style.display = "grid";
      errorMessage.textContent = "ุชุนุฐุฑ ุชุญููู ุงูุฅุนุฏุงุฏุงุชุ ูุชู ุงุณุชุฎุฏุงู ุงูุฅุนุฏุงุฏุงุช ุงูุงูุชุฑุงุถูุฉ. ุญุงูู ูุงุญููุง ุฃู ุชูุงุตู ูุน ุงูุฏุนู.";
      errorMessage.style.display = "block";
    } finally {
      loadingSpinner.style.display = "none";
    }
  }

  async function loadPageStatus(botId) {
    console.log(`ุฌุงุฑู ุฌูุจ ุจูุงูุงุช ุงูุจูุช ุจุงูู ID: ${botId}`);
    try {
      const bot = await handleApiRequest(`/api/bots/${botId}`, {
        headers: { Authorization: `Bearer ${token}` },
      }, pageStatus, "ูุดู ูู ุฌูุจ ุจูุงูุงุช ุงูุจูุช");

      if (!bot) {
        console.log(`ุงูุจูุช ุจุงูู ID ${botId} ูุด ููุฌูุฏ`);
        pageStatus.innerHTML = `
          <div style="display: inline-block; color: red;">
            <strong>ุญุงูุฉ ุงูุฑุจุท:</strong> ุบูุฑ ูุฑุจูุท โ<br>
            <strong>ุงูุณุจุจ:</strong> ุงูุจูุช ุบูุฑ ููุฌูุฏ ุฃู ุชู ุญุฐูู
          </div>
        `;
        instructionsContainer.style.display = "block";
        return;
      }

      console.log(`ุจูุงูุงุช ุงูุจูุช:`, bot);

      // Check if bot is linked to a Facebook page
      if (bot.facebookPageId && bot.facebookApiKey) {
        console.log(`ุฌุงุฑู ุฌูุจ ุจูุงูุงุช ุงูุตูุญุฉ ุจุงูู ID: ${bot.facebookPageId}`);
        const response = await fetch(`https://graph.facebook.com/${bot.facebookPageId}?fields=name&access_token=${bot.facebookApiKey}`);
        const pageData = await response.json();

        if (pageData.name) {
          console.log(`ุชู ุฌูุจ ุจูุงูุงุช ุงูุตูุญุฉ ุจูุฌุงุญ:`, pageData);

          // Create status container
          const statusDiv = document.createElement("div");
          statusDiv.style.display = "inline-block";
          statusDiv.style.color = "green";
          statusDiv.innerHTML = `
            <strong>ุญุงูุฉ ุงูุฑุจุท:</strong> ูุฑุจูุท โ<br>
            <strong>ุงุณู ุงูุตูุญุฉ:</strong> ${pageData.name}<br>
            <strong>ูุนุฑู ุงูุตูุญุฉ:</strong> ${bot.facebookPageId}<br>
            <strong>ุชุงุฑูุฎ ุงูุฑุจุท:</strong> ${new Date(bot.lastFacebookTokenRefresh).toLocaleString('ar-EG')}
          `;

          // Create unlink button
          const unlinkFacebookBtn = document.createElement("button");
          unlinkFacebookBtn.id = "unlinkFacebookBtn";
          unlinkFacebookBtn.className = "btn btn-danger";
          unlinkFacebookBtn.style.marginLeft = "10px";
          unlinkFacebookBtn.style.backgroundColor = "#dc3545";
          unlinkFacebookBtn.style.borderColor = "#dc3545";
          unlinkFacebookBtn.textContent = "ุฅูุบุงุก ุงูุฑุจุท";

          // Add event listener for unlink button
          unlinkFacebookBtn.addEventListener("click", async () => {
            if (confirm("ูู ุฃูุช ูุชุฃูุฏ ุฃูู ุชุฑูุฏ ุฅูุบุงุก ุฑุจุท ูุฐู ุงูุตูุญุฉุ")) {
              try {
                await handleApiRequest(`/api/bots/${botId}/unlink-facebook`, {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                  },
                }, errorMessage, "ูุดู ูู ุฅูุบุงุก ุฑุจุท ุงูุตูุญุฉ");

                errorMessage.textContent = "ุชู ุฅูุบุงุก ุฑุจุท ุงูุตูุญุฉ ุจูุฌุงุญ!";
                errorMessage.style.color = "green";
                errorMessage.style.display = "block";
                await loadPageStatus(botId);
              } catch (err) {
                console.error('โ ุฎุทุฃ ูู ุฅูุบุงุก ุงูุฑุจุท:', err);
                errorMessage.textContent = 'ุฎุทุฃ ูู ุฅูุบุงุก ุงูุฑุจุท: ' + (err.message || 'ุบูุฑ ูุนุฑูู');
                errorMessage.style.color = "red";
                errorMessage.style.display = "block";
              }
            }
          });

          // Append status and button to pageStatus
          pageStatus.innerHTML = "";
          pageStatus.appendChild(statusDiv);
          pageStatus.appendChild(unlinkFacebookBtn);

          instructionsContainer.style.display = "none";
        } else {
          console.log(`ูุดู ูู ุฌูุจ ุจูุงูุงุช ุงูุตูุญุฉ:`, pageData);
          pageStatus.innerHTML = `
            <div style="display: inline-block; color: red;">
              <strong>ุญุงูุฉ ุงูุฑุจุท:</strong> ุบูุฑ ูุฑุจูุท โ<br>
              <strong>ุงูุณุจุจ:</strong> ูุดู ูู ุฌูุจ ุจูุงูุงุช ุงูุตูุญุฉ (ุงูุชููู ูุฏ ูููู ุบูุฑ ุตุงูุญ ุฃู ููุชูู)
            </div>
          `;
          instructionsContainer.style.display = "block";
        }
      } else {
        console.log(`ุงูุจูุช ูุด ูุฑุชุจุท ุจุตูุญุฉ ููุณุจูู`);
        pageStatus.innerHTML = `
          <div style="display: inline-block; color: red;">
            <strong>ุญุงูุฉ ุงูุฑุจุท:</strong> ุบูุฑ ูุฑุจูุท โ
          </div>
        `;
        instructionsContainer.style.display = "block";
      }
    } catch (err) {
      console.error('Error loading page status:', err);
      pageStatus.innerHTML = `
        <div style="display: inline-block; color: red;">
          <strong>ุญุงูุฉ ุงูุฑุจุท:</strong> ุบูุฑ ูุฑุจูุท โ<br>
          <strong>ุงูุณุจุจ:</strong> ุฎุทุฃ ูู ุฌูุจ ุจูุงูุงุช ุงูุจูุช: ${err.message || 'ุบูุฑ ูุนุฑูู'}
        </div>
      `;
      instructionsContainer.style.display = "block";
    }
  }

  async function updateWebhookSetting(botId, key, value) {
    togglesError.style.display = "none";

    try {
      const response = await handleApiRequest(`/api/bots/${botId}/settings`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ [key]: value }),
      }, togglesError, `ูุดู ุชุญุฏูุซ ุฅุนุฏุงุฏ ${key}`);

      if (response.success) {
        console.log(`โ Updated ${key} to ${value} for bot ${botId}`);
      } else {
        throw new Error("ูุดู ูู ุชุญุฏูุซ ุงูุฅุนุฏุงุฏ");
      }
    } catch (err) {
      console.error('ุฎุทุฃ ูู ุชุญุฏูุซ ุงูุฅุนุฏุงุฏ:', err);
      const toggleInput = document.querySelector(`input[data-setting-key="${key}"]`);
      if (toggleInput) toggleInput.checked = !value;
    }
  }

  // Initialize Facebook SDK
  window.fbAsyncInit = function () {
    FB.init({
      appId: '499020366015281',
      cookie: true,
      xfbml: true,
      version: 'v20.0'
    });
  };

  // Load Facebook SDK
  const fbScript = document.createElement("script");
  fbScript.src = "https://connect.facebook.net/en_US/sdk.js";
  fbScript.async = true;
  fbScript.defer = true;
  fbScript.crossOrigin = "anonymous";
  document.head.appendChild(fbScript);

  function loginWithFacebook() {
    console.log('๐ก ุฌุงุฑู ุงูุชุญูู ูู ุญุงูุฉ ุชุณุฌูู ุงูุฏุฎูู ูู ููุณุจูู...');
    FB.getLoginStatus(function (response) {
      console.log('๐ ุญุงูุฉ ุชุณุฌูู ุงูุฏุฎูู:', response);
      if (response.status === 'connected') {
        console.log('โ ุงููุณุชุฎุฏู ูุณุฌูู ุฏุฎูููุ ุฌุงุฑู ุฌูุจ ุงูุตูุญุงุช...');
        getUserPages(response.authResponse.accessToken);
      } else {
        console.log('๐ ุงููุณุชุฎุฏู ุบูุฑ ูุณุฌูู ุฏุฎูููุ ุฌุงุฑู ุทูุจ ุชุณุฌูู ุงูุฏุฎูู...');
        performFacebookLogin();
      }
    });
  }

  function performFacebookLogin() {
    FB.login(function (response) {
      if (response.authResponse) {
        console.log('โ ุชู ุชุณุฌูู ุงูุฏุฎูู ุจูุฌุงุญ:', response.authResponse);
        getUserPages(response.authResponse.accessToken);
      } else {
        console.error('โ ุชู ุฅูุบุงุก ุชุณุฌูู ุงูุฏุฎูู ุฃู ุญุฏุซ ุฎุทุฃ:', response);
        errorMessage.textContent = 'ุชู ุฅูุบุงุก ุชุณุฌูู ุงูุฏุฎูู ุฃู ุญุฏุซ ุฎุทุฃุ ุฌุฑุจ ุชุงูู.';
        errorMessage.style.display = 'block';
      }
    }, { 
      scope: 'pages_messaging,pages_show_list,pages_manage_metadata,pages_read_engagement,pages_manage_posts',
      auth_type: 'rerequest' // ุงุณุชุฎุฏุงู rerequest ุนุดุงู ูุง ูุทูุจุด ูููุฉ ุงููุฑูุฑ ูู ูุณุฌูู
    });
  }

  function getUserPages(accessToken) {
    console.log('๐ ุฌุงุฑู ุฌูุจ ุงูุตูุญุงุช ุจุงุณุชุฎุฏุงู ุงูุชููู:', accessToken.slice(0, 10) + '...');
    FB.api('/me/accounts', { access_token: accessToken }, function (response) {
      if (response && !response.error) {
        console.log('โ ุงูุตูุญุงุช:', response.data);
        if (response.data.length === 0) {
          errorMessage.textContent = 'ูู ูุชู ุงูุนุซูุฑ ุนูู ุตูุญุงุช ูุฑุชุจุทุฉ ุจุญุณุงุจูุ ุชุฃูุฏ ุฅูู ูุฏูุฑ ุตูุญุฉ.';
          errorMessage.style.display = 'block';
          return;
        }
        displayPageSelectionModal(response.data);
      } else {
        console.error('โ ุฎุทุฃ ูู ุฌูุจ ุงูุตูุญุงุช:', response.error);
        errorMessage.textContent = 'ุฎุทุฃ ูู ุฌูุจ ุงูุตูุญุงุช: ' + (response.error.message || 'ุบูุฑ ูุนุฑูู');
        errorMessage.style.display = 'block';
      }
    });
  }

  function displayPageSelectionModal(pages) {
    if (pages.length === 0) {
      errorMessage.textContent = 'ูู ูุชู ุงูุนุซูุฑ ุนูู ุตูุญุงุช ูุฑุชุจุทุฉ ุจุญุณุงุจูุ ุชุฃูุฏ ุฅูู ูุฏูุฑ ุตูุญุฉ.';
      errorMessage.style.display = 'block';
      return;
    }

    const modal = document.createElement("div");
    modal.classList.add("modal");
    modal.innerHTML = `
      <div class="modal-content">
        <div class="modal-header">
          <h3>ุงุฎุชุฑ ุตูุญุฉ ููุณุจูู ูุงุญุฏุฉ ูุฑุจุทูุง ุจุงูุจูุช</h3>
          <button class="modal-close-btn"><i class="fas fa-times"></i></button>
        </div>
        <div class="modal-body">
          <select id="pageSelect" class="form-control">
            <option value="">ุงุฎุชุฑ ุตูุญุฉ</option>
            ${pages.map(page => `<option value="${page.id}" data-token="${page.access_token}">${page.name}</option>`).join('')}
          </select>
        </div>
        <div class="form-actions">
          <button id="confirmPageBtn" class="btn btn-primary">ุชุฃููุฏ</button>
          <button class="btn btn-secondary modal-close-btn">ุฅูุบุงุก</button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);

    modal.querySelectorAll(".modal-close-btn").forEach(btn => {
      btn.addEventListener("click", () => modal.remove());
    });

    const confirmPageBtn = document.getElementById("confirmPageBtn");
    if (confirmPageBtn) {
      confirmPageBtn.addEventListener("click", () => {
        const pageSelect = document.getElementById("pageSelect");
        const selectedPageId = pageSelect.value;
        const selectedOption = pageSelect.options[pageSelect.selectedIndex];
        const accessToken = selectedOption.dataset.token;

        if (!selectedPageId || !accessToken) {
          errorMessage.textContent = 'ูุฑุฌู ุงุฎุชูุงุฑ ุตูุญุฉ ูุฑุจุทูุง ุจุงูุจูุช';
          errorMessage.style.display = 'block';
          modal.remove();
          return;
        }

        console.log('๐ ุจูุงูุงุช ุงูุตูุญุฉ ุงููุฎุชุงุฑุฉ:', { page_id: selectedPageId, access_token: accessToken.slice(0, 10) + '...' });
        saveApiKeys(selectedBotId, accessToken, selectedPageId);
        modal.remove();
      });
    } else {
      console.error("โ confirmPageBtn is not found in the DOM");
    }
  }

  async function saveApiKeys(botId, facebookApiKey, facebookPageId) {
    errorMessage.style.display = "none";
    loadingSpinner.style.display = "flex";

    if (!facebookApiKey || !facebookPageId) {
      loadingSpinner.style.display = "none";
      errorMessage.textContent = "ูุดู ุญูุธ ูุนูููุงุช ุงูุฑุจุท: ููุชุงุญ API ุฃู ูุนุฑู ุงูุตูุญุฉ ุบูุฑ ููุฌูุฏ";
      errorMessage.style.display = "block";
      return;
    }

    console.log('๐ก ุฌุงุฑู ุญูุธ ุจูุงูุงุช ุงูุฑุจุท:', { facebookPageId, facebookApiKey: facebookApiKey.slice(0, 10) + '...' });

    try {
      // ุญูุธ ููุชุงุญ API ููุนุฑู ุงูุตูุญุฉ
      const saveResponse = await handleApiRequest(`/api/bots/${botId}/link-social`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ facebookApiKey, facebookPageId }),
      }, errorMessage, "ูุดู ุญูุธ ูุนูููุงุช ุงูุฑุจุท");

      // ุงูุงุดุชุฑุงู ูู Webhook Events
      const subscribedFields = [
        'messages',
        'messaging_postbacks',
        'messaging_optins',
        'messaging_optouts',
        'messaging_referrals',
        'message_edits',
        'message_reactions',
        'inbox_labels',
        'messaging_customer_information',
        'response_feedback',
        'messaging_integrity',
        'feed'
      ].join(',');

      console.log('๐ก ุฌุงุฑู ุงูุงุดุชุฑุงู ูู Webhook Events:', subscribedFields);
      const subscriptionResponse = await fetch(`https://graph.facebook.com/v20.0/${facebookPageId}/subscribed_apps`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: `subscribed_fields=${encodeURIComponent(subscribedFields)}&access_token=${encodeURIComponent(facebookApiKey)}`
      });

      const subscriptionData = await subscriptionResponse.json();
      if (!subscriptionData.success) {
        console.error('โ ูุดู ูู ุงูุงุดุชุฑุงู ูู Webhook Events:', subscriptionData);
        throw new Error('ูุดู ูู ุงูุงุดุชุฑุงู ูู ุฃุญุฏุงุซ Webhook: ' + (subscriptionData.error?.message || 'ุบูุฑ ูุนุฑูู'));
      }

      console.log('โ ุชู ุงูุงุดุชุฑุงู ูู Webhook Events ุจูุฌุงุญ:', subscriptionData);
      console.log('โ ุชู ุฑุจุท ุงูุตูุญุฉ ุจูุฌุงุญ:', saveResponse);
      errorMessage.textContent = "ุชู ุฑุจุท ุงูุตูุญุฉ ูุงูุงุดุชุฑุงู ูู ุงูุฃุญุฏุงุซ ุจูุฌุงุญ!";
      errorMessage.style.color = "green";
      errorMessage.style.display = "block";
      await loadPageStatus(botId);
    } catch (err) {
      console.error('โ ุฎุทุฃ ูู ุญูุธ ุงูุฑุจุท ุฃู ุงูุงุดุชุฑุงู ูู ุงูุฃุญุฏุงุซ:', err);
      errorMessage.textContent = err.message || "ุฎุทุฃ ูู ุฑุจุท ุงูุตูุญุฉ ุฃู ุงูุงุดุชุฑุงู ูู ุงูุฃุญุฏุงุซุ ุฌุฑุจ ุชุงูู.";
      errorMessage.style.display = "block";
    } finally {
      loadingSpinner.style.display = "none";
    }
  }

  // --- Event Listeners ---
  if (connectFacebookBtn) {
    connectFacebookBtn.addEventListener("click", loginWithFacebook);
  } else {
    console.error("โ connectFacebookBtn is not found in the DOM");
  }

  toggles.forEach(toggle => {
    if (toggle) {
      toggle.addEventListener("change", (e) => {
        const key = e.target.dataset.settingKey;
        const value = e.target.checked;
        if (key) {
          updateWebhookSetting(selectedBotId, key, value);
        }
      });
    } else {
      console.error("โ A toggle element is not found in the DOM");
    }
  });

  // --- Initial Load ---
  await loadPageStatus(selectedBotId);
  await loadBotSettings(selectedBotId);
}

// Make loadFacebookPage globally accessible
window.loadFacebookPage = loadFacebookPage;

// Ensure the function is available even if called early
if (window.loadFacebookPage) {
  console.log('โ loadFacebookPage is defined and ready');
} else {
  console.error('โ loadFacebookPage is not defined');
}
